@model IEnumerable<DemoMVC.Models.Person>

@{
    ViewData["Title"] = "Index";
}

<h2>Index</h2>

@*

    razor syntax:
        - razor expression: @DateTime.Now
            @(DateTime.Now) --- if we need to override which part
                it considers C# and which HTML
        - razor block: @{ code; }
            also include control flow things like
            @if @for @foreach @switch
        - razor comments @* *@                      @*
        - directives like @model
        - HTML helpers (e.g. @Html.DisplayFor()) (gray)
        - tag helpers (turquoise) that look like regular HTML
            - a, form, label, input, the validation ones, select





*@

<p>@DateTime.Now</p>

@{
    // some value i don't use
    var str = "<text with angle brackets>";
}

@str

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.FirstName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Age)
                @*     <label asp-for="Model[0].Age" />   *@
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            var text = "text";
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Age)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    @*   <a href="People/Edit/@item.Id"> Edit</a> |      *@
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>
