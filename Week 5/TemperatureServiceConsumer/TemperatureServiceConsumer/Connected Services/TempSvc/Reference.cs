//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TemperatureServiceConsumer.TempSvc {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TemperatureFahrenheit", Namespace="http://schemas.datacontract.org/2004/07/TemperatureConversionService")]
    [System.SerializableAttribute()]
    public partial class TemperatureFahrenheit : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateComputedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateComputed {
            get {
                return this.DateComputedField;
            }
            set {
                if ((this.DateComputedField.Equals(value) != true)) {
                    this.DateComputedField = value;
                    this.RaisePropertyChanged("DateComputed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TemperatureCelsius", Namespace="http://schemas.datacontract.org/2004/07/TemperatureConversionService")]
    [System.SerializableAttribute()]
    public partial class TemperatureCelsius : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateComputedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateComputed {
            get {
                return this.DateComputedField;
            }
            set {
                if ((this.DateComputedField.Equals(value) != true)) {
                    this.DateComputedField = value;
                    this.RaisePropertyChanged("DateComputed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TempSvc.ITempSvc")]
    public interface ITempSvc {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITempSvc/FahrenheitToCelsius", ReplyAction="http://tempuri.org/ITempSvc/FahrenheitToCelsiusResponse")]
        TemperatureServiceConsumer.TempSvc.TemperatureCelsius FahrenheitToCelsius(TemperatureServiceConsumer.TempSvc.TemperatureFahrenheit f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITempSvc/FahrenheitToCelsius", ReplyAction="http://tempuri.org/ITempSvc/FahrenheitToCelsiusResponse")]
        System.Threading.Tasks.Task<TemperatureServiceConsumer.TempSvc.TemperatureCelsius> FahrenheitToCelsiusAsync(TemperatureServiceConsumer.TempSvc.TemperatureFahrenheit f);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITempSvcChannel : TemperatureServiceConsumer.TempSvc.ITempSvc, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TempSvcClient : System.ServiceModel.ClientBase<TemperatureServiceConsumer.TempSvc.ITempSvc>, TemperatureServiceConsumer.TempSvc.ITempSvc {
        
        public TempSvcClient() {
        }
        
        public TempSvcClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TempSvcClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TempSvcClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TempSvcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TemperatureServiceConsumer.TempSvc.TemperatureCelsius FahrenheitToCelsius(TemperatureServiceConsumer.TempSvc.TemperatureFahrenheit f) {
            return base.Channel.FahrenheitToCelsius(f);
        }
        
        public System.Threading.Tasks.Task<TemperatureServiceConsumer.TempSvc.TemperatureCelsius> FahrenheitToCelsiusAsync(TemperatureServiceConsumer.TempSvc.TemperatureFahrenheit f) {
            return base.Channel.FahrenheitToCelsiusAsync(f);
        }
    }
}
